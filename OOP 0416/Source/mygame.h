#include "CEraser.h"
#include "CBall.h"
#include "CBouncingBall.h"
#include "Coin.h"
#include "Shoot.h"
#include "Health.h"
#include "BOSS.h"
#include "Ammo.h"
#include "jumpBall.h"



namespace game_framework {
	/////////////////////////////////////////////////////////////////////////////
	// Constants
	/////////////////////////////////////////////////////////////////////////////

	enum AUDIO_ID {				// 定義各種音效的編號
		AUDIO_DING,				// 0
		AUDIO_LAKE,				// 1
		AUDIO_NTUT,				// 2
		AUDIO_MENU,				// 3 Menu音樂
		AUDIO_INTRO,
		AUDIO_END,
		AUDIO_EAT,
		AUDIO_HURT,
		AUDIO_GUN,
		AUDIO_HIT

	};


	/////////////////////////////////////////////////////////////////////////////
	// 這個class為遊戲的遊戲開頭畫面物件
	// 每個Member function的Implementation都要弄懂
	/////////////////////////////////////////////////////////////////////////////

	class CGameStateInit : public CGameState {
	public:
		CGameStateInit(CGame* g);
		void OnInit();  								// 遊戲的初值及圖形設定
		void OnBeginState();							// 設定每次重玩所需的變數
		void OnKeyUp(UINT, UINT, UINT); 				// 處理鍵盤Up的動作
		void OnKeyDown(UINT, UINT, UINT);				// 處理鍵盤Down的動作
		void OnLButtonDown(UINT nFlags, CPoint point);  // 處理滑鼠的動作
	protected:
		int x, y;										//Choose的座標
		void OnShow();									// 顯示這個狀態的遊戲畫面
	private:
		CMovingBitmap logo;								// csie的logo
		CMovingBitmap menu;								// csie的logo
		CMovingBitmap Choose;							// csie的logo
		CAnimation		finish;
		GameMap		gameMap;
		CEraser eraser;
		CShoot  Shoot;
		CCoin   Coin;



	};
	/////////////////////////////////////////////////////////////////////////////
	// 這個class為遊戲的遊戲執行物件，主要的遊戲程式都在這裡
	// 每個Member function的Implementation都要弄懂
	/////////////////////////////////////////////////////////////////////////////

	class CGameStateRun : public CGameState {
	public:
		CGameStateRun(CGame* g);
		~CGameStateRun();
		void OnBeginState();							// 設定每次重玩所需的變數
		void OnInit();  								// 遊戲的初值及圖形設定
		void OnKeyDown(UINT, UINT, UINT);
		void OnKeyUp(UINT, UINT, UINT);
		void OnLButtonDown(UINT nFlags, CPoint point);  // 處理滑鼠的動作
		void OnLButtonUp(UINT nFlags, CPoint point);	// 處理滑鼠的動作
		void OnMouseMove(UINT nFlags, CPoint point);	// 處理滑鼠的動作 
		void OnRButtonDown(UINT nFlags, CPoint point);  // 處理滑鼠的動作
		void OnRButtonUp(UINT nFlags, CPoint point);	// 處理滑鼠的動作
	protected:
		void OnMove();									// 移動遊戲元素
		void OnShow();									// 顯示這個狀態的遊戲畫面
	private:
		const int		NUMBALLS;	// 球的總數
		const int		NUMSHOOT;
		int energy;
		GameMap		gameMap;	//地圖
		CMovingBitmap	background;	// 背景圖
		CMovingBitmap	help;		// 說明圖
		CBall* ball;		// 球的陣列
		CCoin* coin;
		CHealth* health;
		CShoot *Shoot;
		CAmmo* Ammo;
		CBOSS* BOSS;
		CJBALL* Jball;
		CMovingBitmap	corner;		// 角落圖
		CBall	enemy1;		// 敵人圖
		CAnimation		energyBar,Lives_P,coin_P,Gun_P;

		CEraser			eraser;		// 拍子
		CInteger		hits_left,Lives;	// 剩下的撞擊數

		CBouncingBall   bball;		// 反覆彈跳的球
		int enemyHealth1 = 0;
		int enemyHealth2 = 0;
		int enemyHealth3 = 0;
		int enemyHealth4 = 0;
		int hits = 0;
		int numberShoot = 0;
	};

	/////////////////////////////////////////////////////////////////////////////
	// 這個class為遊戲的結束狀態(Game Over)
	// 每個Member function的Implementation都要弄懂
	/////////////////////////////////////////////////////////////////////////////

	class CGameStateOver : public CGameState {
	public:
		CGameStateOver(CGame* g);
		void OnBeginState();							// 設定每次重玩所需的變數
		void OnInit();
	protected:
		void OnMove();									// 移動遊戲元素
		void OnShow();									// 顯示這個狀態的遊戲畫面
	private:
		int counter;	// 倒數之計數器
		CAnimation		finish;


	};

	/////////////////////////////////////////////////////////////////////////////
// 這個class為遊戲第二關介面
// 每個Member function的Implementation都要弄懂
/////////////////////////////////////////////////////////////////////////////

	class CGameState2 : public CGameState {
	public:
		CGameState2(CGame* g);
		void OnBeginState();							// 設定每次重玩所需的變數
		void OnInit();
	protected:
		void OnMove();									// 移動遊戲元素
		void OnShow();									// 顯示這個狀態的遊戲畫面
	private:
		int counter;	// 倒數之計數器
		GameMap		gameMap;
		CAnimation		finish;


	};
	/////////////////////////////////////////////////////////////////////////////
// 這個class為遊戲第二關介面
// 每個Member function的Implementation都要弄懂
/////////////////////////////////////////////////////////////////////////////

	class CGameStateDead : public CGameState {
	public:
		CGameStateDead(CGame* g);
		void OnBeginState();							// 設定每次重玩所需的變數
		void OnInit();
	protected:
		void OnMove();									// 移動遊戲元素
		void OnShow();									// 顯示這個狀態的遊戲畫面
	private:
		int counter;	// 倒數之計數器
		CEraser			eraser;		// 拍子
		GameMap		gameMap;
		CAnimation		finish;


	};

/////////////////////////////////////////////////////////////////////////////
// 這個class為遊戲第二關介面
// 每個Member function的Implementation都要弄懂
/////////////////////////////////////////////////////////////////////////////

	class CGameStateAbout: public CGameState {
	public:
		CGameStateAbout(CGame* g);
		void OnBeginState();							// 設定每次重玩所需的變數
		void OnInit();
		void OnKeyUp(UINT, UINT, UINT);				// 處理鍵盤Down的動作
	protected:
		void OnMove();									// 移動遊戲元素
		void OnShow();									// 顯示這個狀態的遊戲畫面

	private:
		int counter;	// 倒數之計數器
		CEraser			eraser;		// 拍子
		GameMap		gameMap;
		CAnimation		About;


	};
	/////////////////////////////////////////////////////////////////////////////
// 這個class為遊戲第二關介面
// 每個Member function的Implementation都要弄懂
/////////////////////////////////////////////////////////////////////////////

	class CGameStateConfiguration : public CGameState {
	public:
		CGameStateConfiguration(CGame* g);
		void OnBeginState();							// 設定每次重玩所需的變數
		void OnInit();
		void OnKeyUp(UINT, UINT, UINT);				// 處理鍵盤Down的動作
	protected:
		void OnMove();									// 移動遊戲元素
		void OnShow();									// 顯示這個狀態的遊戲畫面

	private:
		int counter;	// 倒數之計數器
		CEraser			eraser;		// 拍子
		GameMap		gameMap;
		CAnimation		Configuration;


	};
	
}